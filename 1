class BinaryReader:
    def __init__(self, filepath):
        self.file = open(filepath, 'rb')
        
    def read_uint8(self):
        return int.from_bytes(self.file.read(1), byteorder='little')
        
    def read_uint16(self):
        return int.from_bytes(self.file.read(2), byteorder='little')
    
    def read_uint32(self):
        return int.from_bytes(self.file.read(4), byteorder='little')
    
    def read_int32(self):
        return int.from_bytes(self.file.read(4), byteorder='little', signed=True)
    
    def read_string(self, length):
        return self.file.read(length).decode('ascii').rstrip('\x00')
    
    def skip(self, n):
        self.file.seek(n, 1)

class ModelHeader:
    def __init__(self, f, offs):
        self.offs = offs
        f.seek(offs + 0x8)
        self.bone_transform_offs = offs + f.read_uint32()
        self.bone_count = f.read_uint32()
        self.bone_parent_table_offs = offs + f.read_uint32()
        self.helper_count = f.read_uint32()
        self.helper_table_offs = offs + f.read_uint32()
        self.helper_transform_offs = offs + f.read_uint32()
        self.submesh_count = f.read_uint32()
        self.submesh_start_offs = offs + f.read_uint32()
        self.submesh_blend_count = f.read_uint32()
        self.submesh_blend_start_offs = offs + f.read_uint32()
        self.image_count = f.read_uint32()
        self.image_table_offs = offs + f.read_uint32()
        self.texture_count = f.read_uint32()
        self.texture_table_offs = offs + f.read_uint32()
        f.skip(4)
        self.morph_base_vertex_count = f.read_uint32()
        self.morph_base_vertex_offs = offs + f.read_uint32()
        self.morph_data_count = f.read_uint32()
        self.morph_data_offs = offs + f.read_uint32()
        
def read_mdl(filepath):
    def read_mdl(filepath):
f = BinaryReader(filepath)
    
    header = ModelHeader(f, 0x0)
    textures = []
    
    for i in range(header.texture_count):
        f.seek(header.texture_table_offs + i*4)
        texture_offset = f.read_uint32()
        texture = Texture(f, texture_offset)
        textures.append(texture)
    
    f.close()
    
    return textures
        
        # Print some header information
        print(f'Model name: {model_name}')
        print(f'Bone count: {header.bone_count}')
        print(f'Helper count: {header.helper_count}')
        print(f'Submesh count: {header.submesh_count}')
        print(f'Image count: {header.image_count}')
        print(f'Texture count: {header.texture_count}')

if __name__ == '__main__':
    read_mdl(r'C:\Users\defin\Desktop\tommy.mdl')
