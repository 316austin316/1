import struct

class BinaryReader:
    def __init__(self, f):
        self.f = f

    def read(self, size):
        return self.f.read(size)

    def read_uint32(self):
        return struct.unpack("<I", self.f.read(4))[0]

class ModelHeader:
    def __init__(self, f, offs):
        self.offs = offs
        f.seek(offs + 0x8)
        self.bone_transform_offs = offs + reader.read_uint32()
        self.bone_count = reader.read_uint32()
        self.bone_parent_table_offs = offs + reader.read_uint32()
        self.helper_count = reader.read_uint32()
        self.helper_table_offs = offs + reader.read_uint32()
        self.helper_transform_offs = offs + reader.read_uint32()
        self.submesh_count = reader.read_uint32()
        self.submesh_start_offs = offs + reader.read_uint32()
        self.submesh_blend_count = reader.read_uint32()
        self.submesh_blend_start_offs = offs + reader.read_uint32()
        self.image_count = reader.read_uint32()
        self.image_table_offs = offs + reader.read_uint32()
        self.texture_count = reader.read_uint32()
        self.texture_table_offs = offs + reader.read_uint32()
        reader.read(4)
        self.morph_base_vertex_count = reader.read_uint32()
        self.morph_base_vertex_offs = offs + reader.read_uint32()
        self.morph_data_count = reader.read_uint32()
        self.morph_data_offs = offs + reader.read_uint32()

filename = "example.mdl"

with open(r"C:\Users\defin\Desktop\chdee.mdl", "rb") as f:
    f.seek(0x10)
    texture_offset, texture_count = struct.unpack("<2I", f.read(8))
    print(texture_offset, texture_count)

